Python provides two levels of access to network services:
  * Low-Level:  Access the basic socket support in the underlying OS, which
                allows for the implementation of both clients and servers for
                both connection-oriented (TCP) & connectionless (UDP).
  * High-Level: Access to specific application-level network protocols, such as
                FTP, HTTP, and so on.

Socket: Are the endpoints of bidirectional communication channel and they may
        communicate within a process, between processes on the same machine, or
        between processes on different continents.

Channel Types: Unix domain socket, TCP, UDP, ect...

-------------------------------------------------------------------------------
Domain:   The family of protocols that is used as the transport mechanism
              -> AF_INET: Addresses from the Internet (IP)
Type:     Type of communication between the two endpoints.
              -> SOCK_STREAM: connection-oriented protocols
              -> SOCK_DGRAM: connectionless protocols
Protocol: Used to identify a variant of a protocol within a domain & type.
Hostname: The identifier of a network interface.
Port:     May be a Fixnum port number, a string containing a port number, or
          the name of a service.

Socket Module:
  socket(socket_family, socket_type, protocol=0)
      -> socket_family = domain (from above)
      -> socket_type = type (from above)

Server Socket Methods:
  socket.bind()
    -> Bind address (hostname, port number pair) to the socket
  socket.listen()
  socket.accept()
    -> Passively accept TCP client connection, waiting until connection arrives

Client Socket Methods:
  socket.connect()
    -> Actively initiates TCP server connection

General Socket Methods:
  socket.recv()
  socket.send()
  socket.recvfrom()
    -> Receive UDP messages
  socket.sendto()
    -> Transmits UDP messages
  socket.close()
    -> Clost the socket
  socket.gethostname()

-------------------------------------------------------------------------------
Blocking Vs. Non-blocking:
  Blocking(TCP sockets): Programs don't regain control until either the
                         connection is made, or an error occurs. The process
                         of waiting for data to appear.
  Non-Blocking: Never have to wait for an operation to complete. Useful tool
                when switching between many different connected sockets and we
                want none of them to "lock-up."
NOTE: "Non-Blocking" mode is set by changing one of the socket's "flags".

-------------------------------------------------------------------------------
Basic Client Steps:
  1. Create a socket
  2. Connect to remote server
  3. Send some data
  4. Receive a reply

Basic Server Steps:
  1. Open a socket
  2. Bind to address(and port)
  3. Listen for incoming connections
  4. Accept connections

The chat server does the following things:
  1. Accept multiple incoming connections for client
  2. Read incoming messages from each client and broadcast them to all other
     connected clients

The chat client does the following 2 things:
  1. Listen for incoming messages from the server
  2. Check user input. If the user types in a message then send it to the server.
